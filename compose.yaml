# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3'
services:
  react-app:
    build:
      context: magicasper
      dockerfile: Dockerfile
    container_name: magicasper
    ports:
      - "3000:3000"
    volumes:
      - ./dist:/usr/src/app/dist
    depends_on:
      - nestjs-app

  nestjs-app:
    build:
      context: api-casper
      dockerfile: Dockerfile
    container_name: api-casper
    ports:
      - "8080:8080"
    environment:
      - DB_USERNAME=postgres
      - DB_DATABASE=magi_casper
      - DB_PASSWORD=5657
      - DB_PORT=5432
      - DB_HOST=postgres
      - JWT_SECRET=2d0bce40dfbeb4b28fead52dc37fec14677b3d3089304c4fcc573597c6005766
      - postgres
    volumes:
      - ./dist:/usr/src/app/dist

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=magi_casper
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=5657

  pgadmin:
    image: dpage/pgadmin4
    container_name: nest-pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=pgadmin4
    ports:
      - '5050:80'
    depends_on:
      - postgres

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

